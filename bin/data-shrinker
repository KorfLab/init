#!/usr/bin/env python3

import argparse
import gzip
import random
import sys

import korflab

def chromsizes(fasta):
	table = {}
	for defline, seq in korflab.readfasta(fasta):
		f = defline.split()
		uid = f[0]
		table[uid] = len(seq)
	return table

def cut_fasta(arg):
	if arg.out: fp = open(arg.out, 'w')
	else:       fp = sys.stdout
	for defline, seq in korflab.readfasta(arg.fasta):
		size = int(len(seq) * arg.percent / 100)
		seq = seq[:size]
		print('>', defline, sep='', file=fp)
		for i in range(0, len(seq), 50): print(seq[i:i+50], file=fp)
	fp.close()

def sample_fastq(arg):
	if arg.seed: random.seed(arg.seed)
	if len(arg.fastq) == 1:
		with open(f'{arg.name}.fq', 'w') as fp:
			for h, s, p, q in korflab.readfastq(arg.fastq[0]):
				if random.random() > arg.percent / 100: continue
				print(h, s, p, q, sep='\n', file=fp)
	elif len(arg.fastq) == 2:
		fp1 = open(f'{arg.name}_1.fq', 'w')
		fp2 = open(f'{arg.name}_2.fq', 'w')
		for (h1, s1, p1, q1), (h2, s2, p2, q2) in zip(
				korflab.readfastq(arg.dfq[0]),
				korflab.readfastq(arg.dfq[1])):
			if random.random() > arg.percent / 100: continue
			print(h1, s1, p1, q1, sep='\n', file=fp1)
			print(h2, s2, p2, q2, sep='\n', file=fp2)
		fp1.close()
		fp2.close()
	else:
		sys.exit('one or two fastq files only')

def fit_gff(arg):
	if arg.out: fp = open(arg.out, 'w')
	else:       fp = sys.stdout
	name2size = chromsizes(arg.fasta)
	for gff in korflab.readgff(arg.gff):
		if gff.end >= name2size[gff.chrom]: continue
		print(f'{gff}', file=fp)
	fp.close()

def fit_sam(arg):
	if arg.out: fp = open(arg.out, 'w')
	else:       fp = sys.stdout
	name2size = chromsizes(arg.fasta)
	skip = set()
	for sam in korflab.readsam(arg.sam):
		if sam.qname in skip: continue
		if sam.unmapped or sam.unmapped2:
			skip.add(sam.qname)
			continue
		if sam.end >= name2size[sam.chrom]: continue
		print(f'{sam}', file=fp)
	fp.close()

def fit_fastq(arg):
	name2size = chromsizes(arg.fasta)
	keep = set()
	skip = set()
	for sam in korflab.readsam(arg.sam):
		if sam.qname in skip: continue
		if sam.unmapped or sam.unmapped2:
			skip.add(sam.qname)
			continue
		if sam.end >= name2size[sam.chrom]: continue
		keep.add(sam.qname)

	if len(arg.xfq) == 1:
		with open(f'{arg.name}.fq', 'w') as fp:
			for h, s, p, q in korflab.readfastq(arg.xfq[0]):
				if h not in keep: continue
				print(f'@{h}', s, '+', q, sep='\n', file=fp)
	elif len(arg.xfq) == 2:
		fp1 = open(f'{arg.name}_1.fq', 'w')
		fp2 = open(f'{arg.name}_2.fq', 'w')
		for (h1, s1, p1, q1), (h2, s2, p2, q2) in zip(
				korflab.readfastq(arg.xfq[0]),
				korflab.readfastq(arg.xfq[1])):
			if h1 not in keep: continue
			print(f'@{h1}', s1, '+', q1, sep='\n', file=fp1)
			print(f'@{h2}', s2, '+', q2, sep='\n', file=fp2)
		fp1.close()
		fp2.close()
	else:
		sys.exit('one or two fastq files only')

#########
## CLI ##
#########

parser = argparse.ArgumentParser(
	description='genomic data shrinker for making dev data')
sub = parser.add_subparsers(required=True, help='sub-commands')

## cut_fasta sub-command ##
parse_xfa = sub.add_parser('cut-fasta',
	help='truncate the ends of sequences in a FASTA file')
parse_xfa.add_argument('--fasta', required=True, metavar='<fasta>')
parse_xfa.add_argument('--percent', required=True, metavar='<float>',
	type=float)
parse_xfa.add_argument('--out', metavar='<path>',
	help='output FASTA file name [default stdout]')
parse_xfa.set_defaults(func=cut_fasta)

## sample_fastq sub-command ##
parse_dfq = sub.add_parser('sample-fastq',
	help='randomly downsample a FASTQ file')
parse_dfq.add_argument('--fastq', required=True, metavar='<fastq>',
	nargs='+', help='one or two fastq files')
parse_dfq.add_argument('--percent', required=True, metavar='<float>',
	type=float)
parse_dfq.add_argument('--name', required=True, metavar='<path>',
	help='prefix for saving *.fq file(s)')
parse_dfq.add_argument('--seed', type=int, metavar='<int>',
	help='set random seed [default none]')
parse_dfq.set_defaults(func=sample_fastq)

## fit_gff sub-command ##
parse_xgff = sub.add_parser('fit-gff',
	help='reduce GFF records to those in a (truncated) FASTA file')
parse_xgff.add_argument('--gff', required=True, metavar='<gff>',
	help='GFF file')
parse_xgff.add_argument('--fasta', required=True, metavar='<fasta>',
	help='fasta file')
parse_xgff.add_argument('--out', metavar='<path>',
	help='output GFF file name [default stdout]')
parse_xgff.set_defaults(func=fit_gff)

## fit_sam sub-command ##
parse_xsam = sub.add_parser('fit-sam',
	help='reduce SAM records to those in a (truncated) FASTA file')
parse_xsam.add_argument('--sam', required=True, metavar='<sam>',
	help='SAM file')
parse_xsam.add_argument('--fasta', required=True, metavar='<fasta>',
	help='FASTA file')
parse_xsam.add_argument('--out', metavar='<path>',
	help='output SAM file name [default stdout]')
parse_xsam.set_defaults(func=fit_sam)

## fit_fastq sub-command ##
parse_xfq = sub.add_parser('fit-fastq',
	help='reduce FASTQ records to those in FASTA and SAM')
parse_xfq.add_argument('--fastq', required=True, metavar='<fastq>')
parse_xfq.add_argument('--fasta', required=True, metavar='<fasta>')
parse_xfq.add_argument('--sam', required=True, metavar='<sam>')
parse_xfq.add_argument('--name', required=True, metavar='<path>',
	help='prefix for saving *.fq file(s)')
parse_xfq.set_defaults(func=fit_fastq)

## finish up ##
arg = parser.parse_args()
arg.func(arg)
