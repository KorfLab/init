#!/usr/bin/env python3

import argparse
import gzip
import itertools
import os
import random
import sys


EXON = { # exons are GC-rich and favor GC and CG over CC and GG
	'A': [0.20, 0.30, 0.30, 0.20],
	'C': [0.20, 0.20, 0.40, 0.20],
	'G': [0.20, 0.40, 0.20, 0.20],
	'T': [0.20, 0.30, 0.30, 0.20],
}

INTRON = { # introns are AT-rich and like to make poly-A and poly-T
	'A': [0.50, 0.15, 0.15, 0.20],
	'C': [0.30, 0.20, 0.20, 0.30],
	'G': [0.30, 0.20, 0.20, 0.30],
	'T': [0.20, 0.15, 0.15, 0.50],
}

DON = { # donors are GTaag
	'GTAAA':0.00001, 'GTAAC':0.05832, 'GTAAG':0.05832, 'GTAAT':0.40826, 
	'GTACA':0.00833, 'GTACC':0.00001, 'GTACG':0.00833, 'GTACT':0.05832, 
	'GTAGA':0.00833, 'GTAGC':0.00833, 'GTAGG':0.00001, 'GTAGT':0.05832, 
	'GTATA':0.00833, 'GTATC':0.00833, 'GTATG':0.00833, 'GTATT':0.00001, 
	'GTCAA':0.00001, 'GTCAC':0.00833, 'GTCAG':0.00833, 'GTCAT':0.05832, 
	'GTCCA':0.00119, 'GTCCC':0.00001, 'GTCCG':0.00119, 'GTCCT':0.00833, 
	'GTCGA':0.00119, 'GTCGC':0.00119, 'GTCGG':0.00001, 'GTCGT':0.00833, 
	'GTCTA':0.00119, 'GTCTC':0.00119, 'GTCTG':0.00119, 'GTCTT':0.00001, 
	'GTGAA':0.00001, 'GTGAC':0.00833, 'GTGAG':0.00833, 'GTGAT':0.05832, 
	'GTGCA':0.00119, 'GTGCC':0.00001, 'GTGCG':0.00119, 'GTGCT':0.00833, 
	'GTGGA':0.00119, 'GTGGC':0.00119, 'GTGGG':0.00001, 'GTGGT':0.00833, 
	'GTGTA':0.00119, 'GTGTC':0.00119, 'GTGTG':0.00119, 'GTGTT':0.00001, 
	'GTTAA':0.00001, 'GTTAC':0.00833, 'GTTAG':0.00833, 'GTTAT':0.05832, 
	'GTTCA':0.00119, 'GTTCC':0.00001, 'GTTCG':0.00119, 'GTTCT':0.00833, 
	'GTTGA':0.00119, 'GTTGC':0.00119, 'GTTGG':0.00001, 'GTTGT':0.00833, 
	'GTTTA':0.00119, 'GTTTC':0.00119, 'GTTTG':0.00119, 'GTTTT':0.00001, 
}

ACC = { # acceptors are ttcAG
	'AAAAG':0.00005, 'AACAG':0.00235, 'AAGAG':0.00005, 'AATAG':0.00005, 
	'ACAAG':0.00005, 'ACCAG':0.00235, 'ACGAG':0.00005, 'ACTAG':0.00005, 
	'AGAAG':0.00005, 'AGCAG':0.00235, 'AGGAG':0.00005, 'AGTAG':0.00005, 
	'ATAAG':0.00085, 'ATCAG':0.03995, 'ATGAG':0.00085, 'ATTAG':0.00085, 
	'CAAAG':0.00005, 'CACAG':0.00235, 'CAGAG':0.00005, 'CATAG':0.00005, 
	'CCAAG':0.00005, 'CCCAG':0.00235, 'CCGAG':0.00005, 'CCTAG':0.00005, 
	'CGAAG':0.00005, 'CGCAG':0.00235, 'CGGAG':0.00005, 'CGTAG':0.00005, 
	'CTAAG':0.00085, 'CTCAG':0.03995, 'CTGAG':0.00085, 'CTTAG':0.00085, 
	'GAAAG':0.00005, 'GACAG':0.00235, 'GAGAG':0.00005, 'GATAG':0.00005, 
	'GCAAG':0.00005, 'GCCAG':0.00235, 'GCGAG':0.00005, 'GCTAG':0.00005, 
	'GGAAG':0.00005, 'GGCAG':0.00235, 'GGGAG':0.00005, 'GGTAG':0.00005, 
	'GTAAG':0.00085, 'GTCAG':0.03995, 'GTGAG':0.00085, 'GTTAG':0.00085, 
	'TAAAG':0.00085, 'TACAG':0.03995, 'TAGAG':0.00085, 'TATAG':0.00085, 
	'TCAAG':0.00085, 'TCCAG':0.03995, 'TCGAG':0.00085, 'TCTAG':0.00085, 
	'TGAAG':0.00085, 'TGCAG':0.03995, 'TGGAG':0.00085, 'TGTAG':0.00085, 
	'TTAAG':0.01445, 'TTCAG':0.67915, 'TTGAG':0.01445, 'TTTAG':0.01445, 
}

def nullseq(size): return ''.join(random.choices('ACGT', k=size))

def randomseq(size, model):
	seq = []
	seq.append(random.choice('ACGT'))
	while len(seq) < size:
		seq.append(random.choices('ACGT', weights=model[seq[-1]])[0])
	return ''.join(seq)
	
def kmer_table(mode=None):
	don = [
		{'A':0.7, 'C':0.1, 'G':0.1, 'T':0.1},
		{'A':0.7, 'C':0.1, 'G':0.1, 'T':0.1},
		{'A':0.1, 'C':0.1, 'G':0.1, 'T':0.7},
	]
	acc = [
		{'A':0.05, 'C':0.05, 'G':0.05, 'T':0.85},
		{'A':0.05, 'C':0.05, 'G':0.05, 'T':0.85},
		{'A':0.02, 'C':0.94, 'G':0.02, 'T':0.02},
	]
	pwm = don if mode == 'don' else acc

	prob = {}
	for t in itertools.product('ACGT', repeat=3):
		p = 1.0
		for i, nt in enumerate(t): p *= pwm[i][nt]
		prob[''.join(t)] = p
	
	if mode == 'don':
		for kmer in prob:
			if kmer[0] != kmer[1] and kmer[1] != kmer[2]: prob[kmer] = 0.00001
			
		total = sum(prob.values())
		for k, v in prob.items(): prob[k] = v / total
	
	print(mode)
	vals = []
	for i, (k, v) in enumerate(prob.items()):
		print("'", end='')
		if mode == 'don': print('GT', end='')
		print(k, end='')
		if mode == 'acc': print('AG', end='')
		print("':", f'{v:.5f}', sep='', end='')
		
		print(", ", end='')
		if (i+1) % 4 == 0: print()

def dump_code():
	kmer_table(mode='don')
	kmer_table(mode='acc')
	sys.exit()

parser = argparse.ArgumentParser(
	description='synthetic data for training sequence models')
parser.add_argument('dir', help='output directory')
parser.add_argument('--count', type=int, default=10, metavar='<int>',
	help='number of sequences to generate [%(default)i]')
parser.add_argument('--exon', type=int, default=50, metavar='<int>',
	help='length of exons [%(default)i]')
parser.add_argument('--intron', type=int, default=50, metavar='<int>',
	help='length of introns [%(default)i]')
parser.add_argument('--seed', type=int, default=1, metavar='<int>',
	help='random seed [unset]')
parser.add_argument('--code', action='store_true')
arg = parser.parse_args()

if arg.code: dump_code()

os.system(f'mkdir -p {arg.dir}')
with    gzip.open(f'{arg.dir}/exons.fa.gz', 'wt') as efp,\
		gzip.open(f'{arg.dir}/introns.fa.gz', 'wt') as ifp,\
		gzip.open(f'{arg.dir}/donors.fa.gz', 'wt') as dfp,\
		gzip.open(f'{arg.dir}/acceptors.fa.gz', 'wt') as afp,\
		gzip.open(f'{arg.dir}/exon-intron.fa.gz', 'wt') as eifp,\
		gzip.open(f'{arg.dir}/intron-exon.fa.gz', 'wt') as iefp,\
		gzip.open(f'{arg.dir}/genes.fa.gz', 'wt') as gfp,\
		gzip.open(f'{arg.dir}/neg-exons.fa.gz', 'wt') as nefp,\
		gzip.open(f'{arg.dir}/neg-introns.fa.gz', 'wt') as nifp,\
		gzip.open(f'{arg.dir}/neg-donors.fa.gz', 'wt') as ndfp,\
		gzip.open(f'{arg.dir}/neg-acceptors.fa.gz', 'wt') as nafp,\
		gzip.open(f'{arg.dir}/neg-exon-intron.fa.gz', 'wt') as neifp,\
		gzip.open(f'{arg.dir}/neg-intron-exon.fa.gz', 'wt') as niefp,\
		gzip.open(f'{arg.dir}/neg-genes.fa.gz', 'wt') as ngfp:
	
	for i in range(arg.count):
		exon1 = randomseq(arg.exon, EXON)
		don = random.choices(list(DON.keys()), weights=DON.values(), k=1)[0]
		intron = randomseq(arg.intron, INTRON)
		acc = random.choices(list(ACC.keys()), weights=ACC.values(), k=1)[0]
		exon2 = randomseq(arg.exon, EXON)
		
		exin = exon1[-20:]  + don + intron[:20]
		inex = intron[-20:] + acc + exon2[:20]
		gene = exon1  + don + intron + acc + exon2
		
		print(f'>{i}', exon1,  sep='\n', file=efp)
		print(f'>{i}', intron, sep='\n', file=ifp)
		print(f'>{i}', don,    sep='\n', file=dfp)
		print(f'>{i}', acc,    sep='\n', file=afp)
		print(f'>{i}', exin,   sep='\n', file=eifp)
		print(f'>{i}', inex,   sep='\n', file=iefp)
		print(f'>{i}', gene,   sep='\n', file=gfp)
		
		nexon1 = nullseq(arg.exon)
		ndon = 'GT' + nullseq(3)
		nintron = nullseq(arg.intron)
		nacc = nullseq(3) + 'AG'
		nexon2 = nullseq(arg.exon)
		
		nexin = nexon1[-20:] + ndon + nintron[:20]
		ninex = nintron[-20:] + nacc + nexon2[:20]
		ngene = nexon1  + ndon + nintron + nacc + nexon2

		print(f'>{i}', nexon1,  sep='\n', file=nefp)
		print(f'>{i}', nintron, sep='\n', file=nifp)
		print(f'>{i}', ndon,    sep='\n', file=ndfp)
		print(f'>{i}', nacc,    sep='\n', file=nafp)
		print(f'>{i}', nexin,   sep='\n', file=neifp)
		print(f'>{i}', ninex,   sep='\n', file=niefp)
		print(f'>{i}', ngene,   sep='\n', file=ngfp)
		